#!/usr/bin/env php

<?php
//return false;

printf("%sGit pre-commit hook %1\$s", PHP_EOL);
$projectName = basename(getcwd());
exec('rm -R deprecated/doc');
//exec('php-cs-fixer fix .');
exec('phpdoc', $docOutput, $docReturnCode);
foreach($docOutput as $line) {
    if (strpos($line, 'No ')!==false) {
        $docReturnCode = 1;    
    }
}
exec('phpcs --standard=PSR2 -p *.php',$PSROutput, $PSRReturnCode);
exec('phpunit', $testOutput, $testReturnCode);
if($testReturnCode !== 0) {
//    $minimalTestSummary = array_pop($output);
    printf("Test suite for %s failed: ", $projectName);
    printf("( %s ) %s%2\$s", var_export($testOutput), PHP_EOL);
    exit(1); // exit(1)
} elseif($docReturnCode !== 0) {
//    $minimalDocSummary = array_pop($docOutput);
    printf("Comments not complete for %s", $projectName);
    printf("( %s ) %s%2\$s", var_export($docOutput), PHP_EOL);
    exit(1);
} elseif ($PSRReturnCode !== 0) {
//    $minimalPSRSummary = array_pop($PSROutput);
    printf("%s is not PSR2 compliant", $projectName);
    printf("( %s ) %s%2\$s", var_export($PSROutput), PHP_EOL);
    exit(1);
} else {
    printf("PHPUnit: All tests for %s passed.%s%2\$s", $projectName, PHP_EOL);
    printf("PHPDoc: All comments for %s are valid.%s%2\$s", $projectName, PHP_EOL);
    printf("PHPCS: %s is PSR-2 compliant.%s%2\$s", $projectName, PHP_EOL);
    exit(0);
}
